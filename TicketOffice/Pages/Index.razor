@using System.Globalization;
@page "/"
@inject NavigationManager navigationManager
@inject Blazored.LocalStorage.ILocalStorageService storage


<div class="row" style="margin-left: 200px; margin-top: 300px; margin-right: 200px ;background-color: lightblue;">
    <div class="col-2" style="margin-left: auto">
        <h3 style="text-align:center">Откуда?</h3>

        <RadzenDropDownDataGrid TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowFiltering="true" AllowClear="true" ShowSearch="false" SearchText="Поиск.."
                                Data="availableCities" Style="width:100%;" 
                                @bind-Value="PointOfDeparture"/>
    </div>
    <div class="col-2">
        <h3 style="text-align:center">Куда?</h3>
        <RadzenDropDownDataGrid TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowFiltering="true" AllowClear="true" ShowSearch="false" SearchText="Поиск.."
                                Data="availableCities"   Style="width:100%; text-align: center;"
                                @bind-Value ="PointOfDestination"/>
    </div>
    <div class="col-2">

        <h3 style="text-align:center">Когда?</h3>
        <RadzenDatePicker @bind-Value="Date" DateFormat="d" DateRender="DateRender"/>

    </div>
    <div class="col-2">
        <h3 style="text-align:center">Каким классом?</h3>
        <RadzenDropDownDataGrid TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowFiltering="true" AllowClear="true" ShowSearch="false" SearchText="Поиск.."
                                Data="@ticketClasses" Style="width:100%;  text-align: center;" 
                                @bind-Value="ClassType"/>
    </div>
    <div class="col-2" style="margin-right:auto">
        <h3><br /></h3>
        <button class="btn btn-primary"  @onclick="SearchButtonAction">Поиск</button>
    </div>
</div>



@code{
    Flight searchFlight;
    DateTime today = DateTime.Today;
    public string PointOfDestination { get; set; }
    public string PointOfDeparture { get; set; }
    public DateTime Date { get; set; }
    public DateTime Time { get; set; }
    public string ClassType { get; set; }

    List<string> availableCities = new List<string>();

    List<string> ticketClasses = new List<string>() { "Первый класс", "Бизнес-класс", "Эконом-класс" };

    protected override void OnInitialized()
    {
        var client = new MongoClient("mongodb://localhost");
        var database = client.GetDatabase("TicketOffice");
        var collection = database.GetCollection<City>("Cities").AsQueryable();

        foreach (var item in collection)
        {
            availableCities.Add(item.Name);
        }
    }

    private async Task SearchButtonAction()
    {
        if(PointOfDeparture == null && PointOfDestination == null && Date == DateTime.MinValue && ClassType == null)
        {
            navigationManager.NavigateTo("/", true);
        }
        else
        {

            searchFlight = new Flight(PointOfDeparture, PointOfDestination, Date, ClassType);
            await storage.SetItemAsync<Flight>("SearchFlight", searchFlight);
            navigationManager.NavigateTo("flights");
        }


    }

    void DateRender(DateRenderEventArgs args)
    {
        if (args.Date < DateTime.Today.Date)
        {
            args.Disabled = true;
        }

    }
}
