@inject NavigationManager navManager
@inject Blazored.LocalStorage.ILocalStorageService storage
<div class="container add-flight-component">
    <br />
    <h3 align="center">Добавить рейс</h3>
    @if (!DataEntered)
    {
        <div class="alert alert-danger" role="alert">
            Пожалуйста, заполните все поля
        </div>
    }
    <input class="form-control form-control-lg" type="text" placeholder="Номер рейса" style="margin-bottom:10px;"
           @bind-value="FlightNumber">
    <input class="form-control form-control-lg" list="datalistOptions1" id="DataList1" placeholder="Пункт отправления"
           @bind-value="PointOfDeparture" style="margin-bottom: 10px;" />
    <datalist id="datalistOptions1">
        @foreach (var item in availableCities)
        {
            <option value="@item" />
        }
    </datalist>
    <input class="form-control form-control-lg" list="datalistOptions2" id="DataList2" placeholder="Пункт назначения"
           @bind-value="PointOfDestination" style="margin-bottom: 10px;" />
    <datalist id="datalistOptions2">
        @foreach (var item in availableCities)
        {
            <option value="@item" />
        }
    </datalist>
    <input type="date" class="add-flight-datetime-input" min="@today.ToString("yyyy-MM-dd")" @bind-value="Date" />
    <input type="time" class="add-flight-datetime-input" min="@today.ToString("HH:mm")" @bind-value="Time"/>
    <input class="form-control form-control-lg" list="datalistOptions3" id="DataList3" placeholder="Класс полёта"
           @bind-value="ClassType" style="margin-bottom: 10px;" />
    <datalist id="datalistOptions3">
        @foreach (var item in ticketClasses)
        {
            <option value="@item" />
        }
    </datalist>

    <button type="button" class="btn btn-primary add-flight-button" @onclick="AddToDatabase">Добавить</button>

</div>


@code {
    List<string> availableCities = new List<string>();

    List<string> ticketClasses = new List<string>() { "Первый класс", "Бизнес-класс", "Эконом-класс" };

    DateTime today = DateTime.Today;
    DateTime currentHour = DateTime.UtcNow;
    public string FlightNumber { get; set; }
    public string PointOfDeparture { get; set; }
    public string PointOfDestination { get; set; }
    [BsonDateTimeOptions(Kind = DateTimeKind.Utc)]
    public DateTime Date { get; set; } = DateTime.Today;
    [BsonDateTimeOptions(Kind = DateTimeKind.Utc)]
    public DateTime Time { get; set; }
    public string ClassType { get; set; }
    public bool DataEntered { get; set; } = true;

    void DateRender(DateRenderEventArgs args)
    {
        if (args.Date < DateTime.Today.Date)
        {
            args.Disabled = true;
        }

    }

    protected override void OnInitialized()
    {
        var client = new MongoClient("mongodb://localhost");
        var database = client.GetDatabase("TicketOffice");
        var collection = database.GetCollection<City>("Cities").AsQueryable();

        foreach(var item in collection)
        {
            availableCities.Add(item.Name);
        }
    }

    private void AddToDatabase()
    {
        if(FlightNumber != "" && FlightNumber != null && PointOfDeparture != "" && PointOfDeparture != null
            && PointOfDestination != "" && PointOfDestination != null && Date != DateTime.MinValue &&
            ClassType != "" && ClassType != null)
        {
            DataEntered = true;
            var client = new MongoClient("mongodb://localhost");
            var database = client.GetDatabase("TicketOffice");
            var collection = database.GetCollection<Flight>("Flights");
            Flight flight = new Flight(FlightNumber, PointOfDeparture, PointOfDestination, Date, Time, ClassType);
            collection.InsertOne(flight);
            navManager.NavigateTo("flights");
        }
        else
        {
            DataEntered = false;
        }
    }
}
