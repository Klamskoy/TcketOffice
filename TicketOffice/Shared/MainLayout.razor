@inherits LayoutComponentBase
@inject Blazored.LocalStorage.ILocalStorageService storage
@inject NavigationManager navManager
<div class="page" style="background: linear-gradient(lightblue 70%, deepskyblue);">
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div class="top-row px-4">
            @if (!IsUserLogged)
            {
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                    Зарегистрироваться
                </button>
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop1">
                    Войти
                </button>
            }
            else
            {
                <button class="btn btn-primary" style="margin-right: 20px;" @onclick="Logout">Выйти</button>
            }
        </div>

        <div class="content px-4">
            @Body
        </div>
    </div>
</div>

<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content" style="width:400px;">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Зарегистрироваться</h5>
            </div>
            <div class="modal-body">
                @if(Login == "" || Password == "" || Name == "" || Surname == "" || Patronymic == "" || DayOfBirth == DateTime.MinValue)
            {
                <div class="alert alert-danger" role="alert">
                    Пожалуйста, заполните все поля
                </div>
            }
                
                <h3 style="margin-left:10px;">Логин:</h3>
                <input class="form-control form-control-lg" type="text" style="margin-bottom: 10px; height: 35px;"
                       @bind-value="Login" />
                <h3 style="margin-left:10px;">Пароль:</h3>
                <input type="password" class="form-control form-control-lg" style="margin-bottom: 10px; height: 35px;"
                       @bind-value="Password" />
                <h3 style="margin-left:10px;">Имя:</h3>
                <input class="form-control form-control-lg" type="text" style="margin-bottom: 10px; height: 35px;"
                       @bind-value="Name" />
                <h3 style="margin-left:10px;">Фамилия:</h3>
                <input class="form-control form-control-lg" type="text" style="margin-bottom: 10px; height: 35px;"
                       @bind-value="Surname" />
                <h3 style="margin-left:10px;">Отчество:</h3>
                <input class="form-control form-control-lg" type="text" style="margin-bottom:10px;height:35px;"
                       @bind-value="Patronymic" />
                <h3 style="margin-left:10px;">Дата рождения:</h3>
                <RadzenDatePicker @bind-Value="DayOfBirth" DateFormat="d" Style="width:100%;height:50px;" />
            </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="ToClose">Закрыть</button>
                    <button type="button" class="btn btn-primary" @onclick="ToRegister">Зарегистрироваться</button>
                </div>

        </div>
    </div>
</div>

<div class="modal fade" id="staticBackdrop1" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content" style="width:400px;">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Войти</h5>
            </div>
            <div class="modal-body">
                @if (!UserFound)
                {
                    <div class="alert alert-danger" role="alert">
                        Не удается войти. Пожалуйста, проверьте правильность написания логина или пароля.
                    </div>
                }
                <h3 style="margin-left:10px;">Логин:</h3>
                <input class="form-control form-control-lg" type="text" style="margin-bottom: 10px; height: 35px;"
                       @bind-value="Login" />
                <h3 style="margin-left:10px;">Пароль:</h3>
                <input type="password" class="form-control form-control-lg" style="margin-bottom: 10px; height: 35px;"
                       @bind-value="Password"/>
            </div>

            <div class="modal-footer">
                <button class="btn btn-primary" data-bs-target="#staticBackdrop" data-bs-toggle="modal"
                        style=" margin-right:70px;">
                    Регистрация
                </button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="ToClose">Закрыть</button>
                <button type="button" class="btn btn-primary" @onclick="ToLogin">Войти</button>
            </div>

        </div>
    </div>
</div>
@code{
    public static bool IsUserLogged { get; set; }
    public string Login { get; set; } = "";
    public string Password { get; set; } = "";
    public string Name { get; set; } = "";
    public string Surname { get; set; } = "";
    public string Patronymic { get; set; } = "";
    public DateTime DayOfBirth { get; set; }
    public bool UserFound { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        IsUserLogged = await storage.GetItemAsync<bool>("IsUserLogged");
    }

    public async Task ToRegister()
    {
        if(Login != null && Password != null && Name != null && Surname != null && Patronymic != null && DayOfBirth != DateTime.MinValue)
        {
            User user = new User(Login, Password, Name, Surname, Patronymic, DayOfBirth);

            var client = new MongoClient("mongodb://localhost");
            var db = client.GetDatabase("TicketOffice");
            var coll = db.GetCollection<User>("Users");
            coll.InsertOne(user);
            await storage.SetItemAsync<bool>("IsUserLogged", true);
            await storage.SetItemAsync<User>("CurrentUser", user);
            navManager.NavigateTo("/", true);
        }
    }
    public async Task ToLogin()
    {
        var client = new MongoClient("mongodb://localhost");
        var db = client.GetDatabase("TicketOffice");
        var coll = db.GetCollection<User>("Users");
        if(Login != null && Password != null)
        {
            if (coll.Find(x => x.Login == Login && x.Password == Password).CountDocuments() > 0)
            {
                UserFound = true;
                User user = coll.Find(x => x.Login == Login && x.Password == Password).Single();
                await storage.SetItemAsync<User>("CurrentUser", user);
                await storage.SetItemAsync<bool>("IsUserLogged", true);
                navManager.NavigateTo("/", true);
            }
            else
            {
                UserFound = false;
            }
        }

    }
    async Task Logout()
    {
        await storage.SetItemAsync<bool>("IsUserLogged", false);
        await storage.RemoveItemAsync("CurrentUser");
        navManager.NavigateTo("/", true);
    }

    void ToClose()
    {
        Login  = "";
        Password  = "";
        Name  = "";
        Surname  = "";
        Patronymic  = "";
        DayOfBirth = DateTime.MinValue;
    }
}