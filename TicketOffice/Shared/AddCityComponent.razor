@inject IJSRuntime JSRuntime
@inject NavigationManager navManager
<div class="container add-city-component">
    <br />
    <h3 align="center">Добавить город</h3>
    @if (!DataEntered)
    {
        <div class="alert alert-danger" role="alert">
            Пожалуйста, заполните все поля
        </div>
    }
    <input class="form-control form-control-lg" type="text" placeholder="Название города" style="margin-bottom:10px;"
           @bind-value="Name" />
    <div class="form-floating">
        <textarea @bind="Description" class="form-control" placeholder="Описание" id="floatingTextarea2" style="height: 210px; margin-bottom: 10px;"></textarea>
    </div>
    <div>
        <label>Прикрепите изображение (максимальный размер - 4 Мб)</label><br />
        <InputFile OnChange="LoadImage"></InputFile>
    </div>
    <br />
    <button type="button" class="btn btn-primary add-city-button" @onclick="AddCityToDB">Добавить</button>
</div>
@code {
    public string Name { get; set; }
    public string Description { get; set; }
    private List<IBrowserFile> loadedFiles = new();
    private bool isLoading;
    protected byte[] img;
    public bool DataEntered { get; set; } = true;


    public void AddCityToDB()
    {
        if(Name != "" && Name != null && Description != "" && Description != null && img != null)
        {
            DataEntered = true;
            var client = new MongoClient("mongodb://localhost");
            var db = client.GetDatabase("TicketOffice");
            var coll = db.GetCollection<City>("Cities");
            coll.InsertOne(new City(Name, Description, Convert.ToBase64String(img)));
            navManager.NavigateTo("recommendations");
        }
        else
        {
            DataEntered = false;
        }

    }

    private async Task LoadImage(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                loadedFiles.Add(file);
                var stream = file.OpenReadStream(4194304); // max file size - 4 mb
                img = new byte[stream.Length];
                await stream.ReadAsync(img);
            }

            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("logError", ex);
            }
        }
        isLoading = false;
    }
}
