@inject NavigationManager navManager
    <div class="card border-info mb-3" style="border-radius:10px;">
        <div class="card-header ticket-card-header"/>
        <div class="card-body">
            <div class="row" style="margin-left:100px;">
                <div class="col">
                    Имя
                    <p>@ticket.UsersName</p>
                    Фамилия
                    <p>@ticket.UsersSurname</p>
                    Отчество
                    <p>@ticket.UsersPatronymic</p>
                </div>
                <div class="col">
                    Откуда
                    <p>@ticket.PointOfDeparture</p>
                    Куда
                    <p>@ticket.PointOfDestination</p>
                    Дата
                    <p>@ticket.Date.ToString("dd.MM.yyyy") - @ticket.Time.ToString("HH:mm")</p>
                </div>
                <div class="col">
                    Класс полета
                    <p>@ticket.ClassType</p>
                    Номер рейса
                    <p>@ticket.FlightNumber</p>
                    <button class="btn btn-primary" @onclick="DeleteTicket">Вернуть билет</button>
                </div>

            </div>
        </div>
        <div class="card-footer ticket-card-footer"/>
    </div>

@code {
    [Parameter] public Ticket ticket { get; set; }

    void DeleteTicket()
    {
        var client = new MongoClient("mongodb://localhost");
        var database = client.GetDatabase("TicketOffice");
        var collection = database.GetCollection<Ticket>("Tickets");
        collection.DeleteOne(x => x.FlightNumber == ticket.FlightNumber && x.PointOfDeparture == ticket.PointOfDeparture && x.PointOfDestination == ticket.PointOfDestination &&
        x.Date == ticket.Date && x.ClassType == ticket.ClassType && x.UsersName == ticket.UsersName && x.UsersSurname == ticket.UsersSurname
        && x.UsersPatronymic == ticket.UsersPatronymic);

        navManager.NavigateTo("profile", true);
    }
}
